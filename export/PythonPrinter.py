from LanguagePrinter import LanguagePrinter

class PythonPrinter(LanguagePrinter):
    def __init__(self, outfile):
        super(PythonPrinter, self).__init__(outfile)
        self.writeln('# This Python file was autogenerated from Coq')
        self.writeln('from enum import Enum')
        self.end_decl()

    def end_decl(self):
        self.writeln('')

    def type_alias(self, name, rhsName):
        pass # there are no types aliases in Python

    def enum(self, name, valueNames):
        self.writeln('class {}(Enum):'.format(name))
        for i, n in enumerate(valueNames, 1):
            self.writeln('    ' + n + ' = ' + str(i))
        self.end_decl()

    def variant(self, name, branches):
        '''
        name: str
        branches: list of (branchName, typesList) tuples
        '''
        self.writeln('class {}(object): pass'.format(name))
        self.end_decl()

        for branchName, argTypes in branches:
            self.writeln('class {}({}):'.format(branchName, name))
            self.increaseIndent()
            constructorArgs = ''.join([', f' + str(i) for i in range(len(argTypes))])
            self.writeln('def __init__(self{}):'.format(constructorArgs))
            self.increaseIndent()
            for i in range(len(argTypes)):
                self.writeln('self.f{} = f{}'.format(i, i))
            if len(argTypes) == 0:
                self.writeln('pass')
            self.decreaseIndent()
            self.decreaseIndent()
            self.end_decl()

    def begin_constant_decl(self, name, typ):
        self.write(name + ' = ')

    def end_constant_decl(self):
        self.write('\n')
        self.end_decl()

    def bit_literal(self, s):
        self.write('0b' + s)
